package ${packageName}.controller;

import cn.dev33.satoken.annotation.SaCheckPermission;
import com.galio.common.log.annotation.OperateLog;
import com.galio.common.log.enums.OperTypeEnum;
import com.galio.core.validate.InsertGroup;
import com.galio.core.validate.UpdateGroup;
import ${packageName}.model.dto.${ClassName}ListRequestDTO;
#if($table.crud || $table.sub)
import ${packageName}.model.dto.${ClassName}PageRequestDTO;
import com.galio.mybatis.page.PageVO;
import com.baomidou.mybatisplus.core.metadata.IPage;
#end
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import ${packageName}.model.entity.${ClassName};
import ${packageName}.model.vo.${ClassName}VO;
import ${packageName}.model.dto.${ClassName}SaveDTO;
import ${packageName}.model.dto.${ClassName}EditDTO;
import ${packageName}.model.converter.${ClassName}Converter;
import ${packageName}.service.${ClassName}Service;

import java.util.List;
import java.util.Arrays;

import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.NotNull;

/**
 * @Author: ${author}
 * @Date: ${datetime}
 * @Description: ${functionName}接口
 * 前端访问路由地址为:/${moduleAlias}/${businessName}
 */
@Validated
@RestController
@RequiredArgsConstructor
@Tag(name = "${functionName}API")
@RequestMapping("/${businessName}")
public class ${ClassName}Controller {

    private final ${ClassName}Service ${className}Service;
    private final ${ClassName}Converter ${className}Converter;

    #if($table.crud || $table.sub)
    /**
     * 分页查询${functionName}列表
     */
    @OperateLog(operModul = "分页查询${functionName}列表" , operType = OperTypeEnum.SELECT)
    @Operation(summary = "分页查询${functionName}列表")
    @SaCheckPermission("${permissionPrefix}:page")
    @PostMapping("/page")
    public PageVO findPage(@RequestBody ${ClassName}PageRequestDTO dto) {
        IPage<${ClassName}> pageData = ${className}Service.listPage(dto);
        return PageVO.build(pageData);
    }
    #end

    /**
    * 查询${functionName}列表
    * @param ${ClassName}ListRequestDTO
    * @return List<${ClassName}VO>
    */
    @OperateLog(operModul = "查询${functionName}列表" , operType = OperTypeEnum.SELECT)
    @Operation(summary = "查询${functionName}列表")
    @SaCheckPermission("${permissionPrefix}:list")
    @PostMapping("/list")
    public List<${ClassName}VO> findList(@RequestBody ${ClassName}ListRequestDTO dto) {
        List<${ClassName}> ${className}List = ${className}Service.list(dto);
        return ${className}Converter.entitiesToVOs(${className}List);
    }


    /**
     * 获取${functionName}详细信息
     *
     * @param ${pkColumn.fieldName} 主键
     */
    @OperateLog(operModul = "查询${functionName}详情" , operType = OperTypeEnum.SELECT)
    @Operation(summary = "查询${functionName}详情")
    @SaCheckPermission("${permissionPrefix}:query")
    @GetMapping("/{${pkColumn.fieldName}}")
    public ${ClassName}VO getInfo(@NotNull(message = "主键不能为空") @PathVariable ${pkColumn.fieldType} ${pkColumn.fieldName}) {
        ${ClassName} ${className} =${className}Service.getById(${pkColumn.fieldName});
        return ${className}Converter.entityToVO(${className});

    }

    /**
     * 新增${functionName}
     */
    @OperateLog(operModul = "新增${functionName}" , operType = OperTypeEnum.INSERT)
    @Operation(summary = "新增${functionName}")
    @SaCheckPermission("${permissionPrefix}:add")
    @PostMapping()
    public Object add(@Validated(InsertGroup.class) @RequestBody ${ClassName}SaveDTO dto) {
        return ${className}Service.save(dto);
    }

    /**
     * 修改${functionName}
     */
    @OperateLog(operModul = "修改${functionName}" , operType = OperTypeEnum.UPDATE)
    @Operation(summary = "修改${functionName}")
    @SaCheckPermission("${permissionPrefix}:edit")
    @PutMapping()
    public Object edit(@Validated(UpdateGroup.class) @RequestBody ${ClassName}EditDTO dto) {
        return ${className}Service.update(dto);
    }

    /**
     * 删除${functionName}
     *
     * @param ${pkColumn.fieldName}s 主键串
     */
    @OperateLog(operModul = "删除${functionName}" , operType = OperTypeEnum.DELETE)
    @Operation(summary = "删除${functionName}")
    @SaCheckPermission("${permissionPrefix}:remove")
    @DeleteMapping("/{${pkColumn.fieldName}s}")
    public Object remove(@NotEmpty(message = "主键不能为空") @PathVariable ${pkColumn.fieldType}[] ${pkColumn.fieldName}s) {
        return ${className}Service.deleteWithValidByIds(Arrays.asList(${pkColumn.fieldName}s));
    }
}
