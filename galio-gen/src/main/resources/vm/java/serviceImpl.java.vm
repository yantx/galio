package ${packageName}.service.impl;

import cn.hutool.core.bean.BeanUtil;
import com.galio.core.utils.StringUtils;
    #if($table.crud || $table.sub)
    import com.galio.mybatis.page.PageDto;
    import com.galio.mybatis.page.PageVo;
    import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
    #end
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.core.toolkit.Wrappers;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import ${packageName}.model.dto.${ClassName}Dto;
import ${packageName}.model.vo.${ClassName}Vo;
import ${packageName}.model.${ClassName};
import ${packageName}.mapper.${ClassName}Mapper;
import ${packageName}.service.${ClassName}Service;

import java.util.List;
import java.util.Map;
import java.util.Collection;

/**
 * @Author: ${author}
 * @Date: ${datetime}
 * @Description: ${functionName}Service业务层处理
 */
@RequiredArgsConstructor
@Service
public class ${ClassName}ServiceImpl implements ${ClassName}Service {

    private final ${ClassName}Mapper ${className}Mapper;

    /**
     * 查询${functionName}
     */
    @Override
    public ${ClassName}Vo queryById(${pkColumn.javaType} ${pkColumn.javaField}) {
        return ${className}Mapper.selectVoById(${pkColumn.javaField});
    }

    #if($table.crud || $table.sub)
        /**
         * 查询${functionName}列表
         */
        @Override
        public PageVo<${ClassName}Vo> queryPageList(PageDto pageDto) {
            LambdaQueryWrapper<${ClassName}> lqw = Wrappers.lambdaQuery();
            PageVo<${ClassName}Vo> result = PageVo.build(${className}Mapper.selectVoPage(pageDto.build(), lqw));
            return result;
        }
    #end

    /**
     * 查询${functionName}列表
     */
    @Override
    public List<${ClassName}Vo> queryList(${ClassName}Dto dto) {
        LambdaQueryWrapper<${ClassName}> lqw = buildQueryWrapper(dto);
        return ${className}Mapper.selectVoList(lqw);
    }

    private LambdaQueryWrapper<${ClassName}> buildQueryWrapper(${ClassName}Dto dto) {
        Map<String, Object> params = bo.getParams();
        LambdaQueryWrapper<${ClassName}> lqw = Wrappers.lambdaQuery();
        #foreach($column in $columns)
            #if($column.query)
                #set($queryType=$column.queryType)
                #set($javaField=$column.javaField)
                #set($javaType=$column.javaType)
                #set($columnName=$column.columnName)
                #set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
                #set($mpMethod=$column.queryType.toLowerCase())
                #if($queryType != 'BETWEEN')
                    #if($javaType == 'String')
                        #set($condition='StringUtils.isNotBlank(bo.get'+$AttrName+'())')
                    #else
                        #set($condition='bo.get'+$AttrName+'() != null')
                    #end
                    lqw.$mpMethod($condition, ${ClassName}::get$AttrName, bo.get$AttrName());
                #else
                    lqw.between(params.get("begin$AttrName") != null && params.get("end$AttrName") != null,
                        ${ClassName}::get$AttrName , params.get("begin$AttrName"), params.get("end$AttrName"));
                #end
            #end
        #end
        return lqw;
    }

    /**
     * 新增${functionName}
     */
    @Override
    public Boolean insertByBo(${ClassName}Dto dto) {
        ${ClassName} add = BeanUtil.toBean(dto, ${ClassName}. class);
        validEntityBeforeSave(add);
        boolean flag = ${className}Mapper.insert(add) > 0;
        #set($pk=$pkColumn.javaField.substring(0,1).toUpperCase() + ${pkColumn.javaField.substring(1)})
        if (flag) {
            bo.set$pk(add.get$pk());
        }
        return flag;
    }

    /**
     * 修改${functionName}
     */
    @Override
    public Boolean updateByDto(${ClassName}Dto dto) {
        ${ClassName} update = BeanUtil.toBean(dto, ${ClassName}. class);
        validEntityBeforeSave(update);
        return ${className}Mapper.updateById(update) > 0;
    }

    /**
     * 保存前的数据校验
     */
    private void validEntityBeforeSave(${ClassName} entity) {
        //TODO 做一些数据校验,如唯一约束
    }

    /**
     * 批量删除${functionName}
     */
    @Override
    public Boolean deleteWithValidByIds(Collection<${pkColumn.javaType}> ids, Boolean isValid) {
        if (isValid) {
            //TODO 做一些业务上的校验,判断是否需要校验
        }
        return ${className}Mapper.deleteBatchIds(ids) > 0;
    }
}
